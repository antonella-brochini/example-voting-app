name: Build and Push all images to ECR

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configurar credenciales temporales de AWS
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get latest successful run_id from Infra repo
      run: |
        run_id=$(curl -s -H "Authorization: token ${{ secrets.INFRA_REPO_PAT }}" \
          "https://api.github.com/repos/antonella-brochini/voting-app-infra/actions/workflows/deployEKS.yml/runs?status=success&branch=main&per_page=1" \
          | jq -r '.workflow_runs[0].id')
        echo "RUN_ID=$run_id" >> $GITHUB_ENV

    - name: Download Artifact from Infra Repo
      uses: actions/download-artifact@v4
      with:
        name: ecr-urls
        path: ./ecr-urls
        github-token: ${{ secrets.INFRA_REPO_PAT }}
        repository: antonella-brochini/voting-app-infra
        run-id: ${{ env.RUN_ID }}

    - name: Read ECR URLs
      id: read_urls
      run: |
        urls=($(cat ./ecr-urls/ecr_urls.txt))
        echo "worker=${urls[0]}" >> $GITHUB_OUTPUT
        echo "vote=${urls[1]}" >> $GITHUB_OUTPUT
        echo "result=${urls[2]}" >> $GITHUB_OUTPUT

    - name: Login to ECR
      run: |
        registry=$(echo "${{ steps.read_urls.outputs.worker }}" | cut -d'/' -f1)
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $registry

    - name: Determine image tag
      id: set_tag
      run: |
          ENVIRONMENT=prod
          BUILD_DATE=$(date +%Y%m%d)
          BUILD_NUMBER=${{ github.run_number }}
          TAG="${ENVIRONMENT}-${BUILD_DATE}-${BUILD_NUMBER}"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT


    - name: Build, tag and push voting-worker image
      run: |
        docker build -t voting-worker ./worker
        docker tag voting-worker:latest ${{ steps.read_urls.outputs.worker }}:${{ steps.set_tag.outputs.image_tag }}
        docker push ${{ steps.read_urls.outputs.worker }}:${{ steps.set_tag.outputs.image_tag }}

    - name: Build, tag and push voting-result image
      run: |
        docker build -t voting-result ./result
        docker tag voting-result:latest ${{ steps.read_urls.outputs.result }}:${{ steps.set_tag.outputs.image_tag }}
        docker push ${{ steps.read_urls.outputs.result }}:${{ steps.set_tag.outputs.image_tag }}

    - name: Build, tag and push voting-vote image
      run: |
        docker build -t voting-vote ./vote
        docker tag voting-vote:latest ${{ steps.read_urls.outputs.vote }}:${{ steps.set_tag.outputs.image_tag }}
        docker push  ${{ steps.read_urls.outputs.vote }}:${{ steps.set_tag.outputs.image_tag }}

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name voting-cluster

     
      - name: Update images with new tag
        env:
          IMAGE_TAG: ${{ needs.build_and_push.outputs.image_tag }}
        run: |
          sed -i -E "s|image:.*|image: 804429548551.dkr.ecr.us-east-1.amazonaws.com/voting-worker:${{ env.IMAGE_TAG }}|" k8s-specifications/worker-deployment.yaml
          sed -i -E "s|image:.*|image: 804429548551.dkr.ecr.us-east-1.amazonaws.com/voting-vote:${{ env.IMAGE_TAG }}|" k8s-specifications/vote-deployment.yaml
          sed -i -E "s|image:.*|image: 804429548551.dkr.ecr.us-east-1.amazonaws.com/voting-result:${{ env.IMAGE_TAG }}|" k8s-specifications/result-deployment.yaml
          sed -i 's/type: NodePort/type: ClusterIP/' k8s-specifications/vote-service.yaml
          sed -i '/nodePort/d' k8s-specifications/vote-service.yaml
          sed -i 's/port: 8081/port: 80/' k8s-specifications/vote-service.yaml
          
          sed -i 's/type: NodePort/type: ClusterIP/' k8s-specifications/result-service.yaml
          sed -i 's/port: 8081/port: 80/' k8s-specifications/result-service.yaml
          sed -i '/nodePort/d' k8s-specifications/result-service.yaml
         
          
       
      - name: Deploy to prod namespace
        run: |
          kubectl apply -f k8s-specifications/ --namespace=prod
        


