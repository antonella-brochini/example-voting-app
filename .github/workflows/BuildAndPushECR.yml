name: Build and Push all images to ECR

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configurar credenciales temporales de AWS
      uses: aws-actions/configure-aws-credentials@v3
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get latest successful run_id from Infra repo
      run: |
        run_id=$(curl -s -H "Authorization: token ${{ secrets.INFRA_REPO_PAT }}" \
        "https://api.github.com/repos/antonella-brochini/voting-app-infra/actions/workflows/deployEKS.yml/runs?status=success&branch=main&per_page=1" \
        | jq -r '.workflow_runs[0].id')
         echo "RUN_ID=$run_id" >> $GITHUB_ENV


      
    - name: Download Artifact from Infra Repo
      uses: actions/download-artifact@v4
      with:
        name: ecr-urls
        path: ./ecr-urls
        github-token: ${{ secrets.INFRA_REPO_PAT }}
        repository: antonella-brochini/voting-app-infra
        run-id: ${{ env.RUN_ID }}


    - name: Read ECR URLs
      id: read_urls
      run: |
          urls=($(cat ./ecr-urls/ecr_urls.txt))
          echo "worker=${urls[0]}" >> $GITHUB_OUTPUT
          echo "vote=${urls[1]}" >> $GITHUB_OUTPUT
          echo "result=${urls[2]}" >> $GITHUB_OUTPUT


    - name: Login to ECR
      run: |
        registry=$(echo "${{ steps.read_urls.outputs.worker }}" | cut -d'/' -f1)
        aws ecr get-login-password | docker login --username AWS --password-stdin $registry



    - name: Build, tag and push voting-worker image
      env:
        ENVIRONMENT: prod
        BUILD_DATE: ${{ github.run_attempt == 1 && github.run_started_at && (github.run_started_at | fromJson | toDate | format('yyyyMMdd')) || '' }}
        BUILD_NUMBER: ${{ github.run_number }}
        run: |
          TAG="${ENVIRONMENT}-${BUILD_DATE}-${BUILD_NUMBER}"
          echo "Tag de la imagen: $TAG"
          # Construir la imagen localmente
          docker build -t voting-worker ./worker
          # Etiquetar con la URL completa del repositorio + tag único
          docker tag voting-worker:latest ${{ steps.read_urls.outputs.worker }}:$TAG
          # Push de la imagen con tag único
          docker push ${{ steps.read_urls.outputs.worker }}:$TAG

        
    - name: Build, tag and push voting-result image
      run: |
        docker build -t voting-result ./result
        docker tag voting-result:latest ${{ steps.read_urls.outputs.result }}
        docker push ${{ steps.read_urls.outputs.result }}
